// Code generated by mockery v2.52.4. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/radityacandra/ecommerce-connector-cli/internal/application/user/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockIRepository) FindUserByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockIRepository_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIRepository_Expecter) FindUserByEmail(ctx interface{}, email interface{}) *MockIRepository_FindUserByEmail_Call {
	return &MockIRepository_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", ctx, email)}
}

func (_c *MockIRepository_FindUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockIRepository_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIRepository_FindUserByEmail_Call) Return(_a0 *model.User, _a1 error) *MockIRepository_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_FindUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *MockIRepository_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, user
func (_m *MockIRepository) Insert(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockIRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockIRepository_Expecter) Insert(ctx interface{}, user interface{}) *MockIRepository_Insert_Call {
	return &MockIRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, user)}
}

func (_c *MockIRepository_Insert_Call) Run(run func(ctx context.Context, user *model.User)) *MockIRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockIRepository_Insert_Call) Return(_a0 error) *MockIRepository_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_Insert_Call) RunAndReturn(run func(context.Context, *model.User) error) *MockIRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
