// Code generated by mockery v2.52.4. DO NOT EDIT.

package service

import (
	context "context"

	service "github.com/radityacandra/ecommerce-connector-cli/internal/application/user/service"
	mock "github.com/stretchr/testify/mock"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Identify provides a mock function with given fields: ctx, email
func (_m *MockIService) Identify(ctx context.Context, email string) (service.IdentifyOutput, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Identify")
	}

	var r0 service.IdentifyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (service.IdentifyOutput, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) service.IdentifyOutput); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(service.IdentifyOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_Identify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identify'
type MockIService_Identify_Call struct {
	*mock.Call
}

// Identify is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIService_Expecter) Identify(ctx interface{}, email interface{}) *MockIService_Identify_Call {
	return &MockIService_Identify_Call{Call: _e.mock.On("Identify", ctx, email)}
}

func (_c *MockIService_Identify_Call) Run(run func(ctx context.Context, email string)) *MockIService_Identify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIService_Identify_Call) Return(_a0 service.IdentifyOutput, _a1 error) *MockIService_Identify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_Identify_Call) RunAndReturn(run func(context.Context, string) (service.IdentifyOutput, error)) *MockIService_Identify_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, input
func (_m *MockIService) Register(ctx context.Context, input service.RegisterInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.RegisterInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - input service.RegisterInput
func (_e *MockIService_Expecter) Register(ctx interface{}, input interface{}) *MockIService_Register_Call {
	return &MockIService_Register_Call{Call: _e.mock.On("Register", ctx, input)}
}

func (_c *MockIService_Register_Call) Run(run func(ctx context.Context, input service.RegisterInput)) *MockIService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.RegisterInput))
	})
	return _c
}

func (_c *MockIService_Register_Call) Return(_a0 error) *MockIService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIService_Register_Call) RunAndReturn(run func(context.Context, service.RegisterInput) error) *MockIService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
