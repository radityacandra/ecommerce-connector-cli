// Code generated by mockery v2.52.4. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// InitConfig provides a mock function with given fields: ctx, configName, configValue
func (_m *MockIService) InitConfig(ctx context.Context, configName string, configValue interface{}) error {
	ret := _m.Called(ctx, configName, configValue)

	if len(ret) == 0 {
		panic("no return value specified for InitConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, configName, configValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIService_InitConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitConfig'
type MockIService_InitConfig_Call struct {
	*mock.Call
}

// InitConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - configName string
//   - configValue interface{}
func (_e *MockIService_Expecter) InitConfig(ctx interface{}, configName interface{}, configValue interface{}) *MockIService_InitConfig_Call {
	return &MockIService_InitConfig_Call{Call: _e.mock.On("InitConfig", ctx, configName, configValue)}
}

func (_c *MockIService_InitConfig_Call) Run(run func(ctx context.Context, configName string, configValue interface{})) *MockIService_InitConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockIService_InitConfig_Call) Return(err error) *MockIService_InitConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIService_InitConfig_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *MockIService_InitConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
